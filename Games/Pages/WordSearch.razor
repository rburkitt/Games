@page "/wordsearch"

@using System.Collections.Generic;
@using Games.WordSearch
@using Games.Services

@inject WordSearchStateContainerService stateService;

@code {
    [Inject]
    public IWordService WordService { get; set; }

    private string[] wordList = new string[] {};
    private Search theGameW = new Search(new List<string>(), 10, 10);

    protected override async Task OnInitializedAsync()
    {        
        await Setup(false);
    }

    public async Task Setup(bool newGame = false)
    {
        wordList = await WordService.GetWords();        

        if (stateService.Value.Found.Count == 0 || newGame)
        {
            stateService.SetValue(new Search(wordList.OrderBy(o => System.Guid.NewGuid().ToString()).Take(15).ToList(), 10, 10));
        }
        
        theGameW = stateService.Value;        
    }

    public void Solve()
    {
        theGameW.HidePuzzle = !theGameW.HidePuzzle;
        theGameW.HideSolution = !theGameW.HideSolution;
    }

    public void Highlight(int r, int c)
    {
        if (theGameW.BgColor[r, c] == "00f")
        {
            theGameW.BgColor[r, c] = "#fd7";
        }
        else
        {
            theGameW.BgColor[r, c] = "00f";
        }
    }

    public void CrossOut(int index)
    {
        if (theGameW.Finds[index] == "")
        {
            theGameW.Finds[index] = "line-through";
        }
        else
        {
            theGameW.Finds[index] = "";
        }
    }    
}

<div class="container">
    <div class="row">
        <div class="col">
            <table>
                <tr><th><u>Find:</u></th></tr>
                @if (theGameW != null)
                {
                    for (int find = 0; find < theGameW.Found.Count; find++)
                    {
                        string print = theGameW.Found[find];
                        var local_find = find;
                        <tr><td style="text-decoration: @theGameW.Finds[find];" @onclick="(e => CrossOut(local_find))">@print</td></tr>
                    }
                }
            </table> 
            <button type="button" class="btn btn-link" style="padding: 0px;%; margin-bottom: 10px;" @onclick="@Solve">Solution &rArr;</button> 
        </div>
        <div class="col-10" hidden="@theGameW.HidePuzzle">
            <table>
                @if (theGameW != null)
                {
                    for (int r = 0; r < theGameW.Puzzle.GetLength(0); r++)//print puzzle
                    {
                        var local_r = r;
                        <tr>
                            @for (int c = 0; c < theGameW.Puzzle.GetLength(1); c++)
                            {
                                var local_c = c;
                                <td style="width: 25px; text-align: center;background-color:@theGameW.BgColor[r,c]" @onclick="(e => Highlight(local_r, local_c))">@theGameW.Puzzle[r, c]</td>
                            }
                        </tr>
                    }
                }
            </table>                       
        </div>
        <div class="col-10" hidden="@theGameW.HideSolution">
            <table>
                @if (theGameW != null)
                {
                    for (int r = 0; r < theGameW.Solution.GetLength(0); r++)//print solution
                    {
                        <tr>
                            @for (int c = 0; c < theGameW.Solution.GetLength(1); c++)
                            {
                                <td style="width: 25px; text-align: center;">@theGameW.Solution[r, c]</td>
                            }
                        </tr>
                    }
                }
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col setup">
            <button style="margin-top: 10px;" @onclick="(e => Setup(true))">New</button>
        </div>
    </div>
</div>

<style>
    .setup {
        color: black;
        float: right;
    }

    .setup button {
        background-color: transparent;
        text-align: center;
        vertical-align: middle;
        display: inline-flex;
        justify-content: center;
        border: 1px solid black;
        color: black;

        padding: .25rem .5rem;
        font-size: .875rem;
        line-height: 1.5;
        border-radius: .2rem;
    }
</style>