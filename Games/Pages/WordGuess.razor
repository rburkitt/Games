@page "/wordguess"
@inject HttpClient Http

@using System.Collections.Generic;

@code {
    public enum Location
    {
        Yes = 0,
        No = 1,
        Contains = 2,
        Empty = 3
    }
    public class Letter
    {
        public string Text {get; set;} = "";
        public Location Location {get; set;} = Location.Empty;
    }
    public class Round
    {        
        public Letter One {get; set;} = new Letter();
        public Letter Two {get; set;} = new Letter();
        public Letter Three {get; set;} = new Letter();
        public Letter Four {get; set;} = new Letter();
        public Letter Five {get; set;} = new Letter();
        public int Score {get; set;} = 0;
    }
    public class Wordle
    {
        public string Word {get; set;}= "";
        public int Turn {get; set;} = 0;
        public string GuessWord { get; set; } = "";
        public bool Finished { get; set; } = false;

        public List<Round> Rounds = new List<Round>(){new Round(), new Round(), new Round(), new Round(), new Round(), new Round()};

        public Wordle()
        {
            Turn = 0;
        }

        public Wordle(string[] words)
        {
            Random rnd = new Random();
            Word = words[rnd.Next(words.Length)].Trim().ToUpper();
            Turn = 0;
        }

        public void Guess()
        {
            if (string.IsNullOrEmpty(GuessWord)) return;
            if (GuessWord.Length != 5) throw new Exception("Your guess must be 5 letters.");
            if (Turn >= Rounds.Count) return;            

            // increase turn
            Turn++;

            var test = Word.ToCharArray().Select(c => c.ToString()).ToArray();

            var currentRound = Rounds.Skip(Turn - 1).First();

            currentRound.One.Text = GuessWord.Substring(0, 1).ToUpper();
            currentRound.Two.Text = GuessWord.Substring(1, 1).ToUpper();
            currentRound.Three.Text = GuessWord.Substring(2, 1).ToUpper();
            currentRound.Four.Text = GuessWord.Substring(3, 1).ToUpper();
            currentRound.Five.Text = GuessWord.Substring(4, 1).ToUpper();

            GuessWord = "";

            if(currentRound.One.Text.ToUpper() == test[0])
            {
                currentRound.One.Location = Location.Yes;
                currentRound.Score++;
            }
            else if(Word.Contains(currentRound.One.Text))
                currentRound.One.Location = Location.Contains;
            else
            {
                currentRound.One.Location = Location.No;
            }

            if(currentRound.Two.Text.ToUpper() == test[1])
            {
                currentRound.Two.Location = Location.Yes;
                currentRound.Score++;
            }
            else if(Word.Contains(currentRound.Two.Text))
                currentRound.Two.Location = Location.Contains;
            else
            {
                currentRound.Two.Location = Location.No;
            }

            if(currentRound.Three.Text.ToUpper() == test[2])
            {
                currentRound.Three.Location = Location.Yes;
                currentRound.Score++;
            }
            else if(Word.Contains(currentRound.Three.Text))
                currentRound.Three.Location = Location.Contains;
            else
            {
                currentRound.Three.Location = Location.No;
            }

            if(currentRound.Four.Text.ToUpper() == test[3])
            {
                currentRound.Four.Location = Location.Yes;
                currentRound.Score++;
            }
            else if(Word.Contains(currentRound.Four.Text))
                currentRound.Four.Location = Location.Contains;
            else
            {
                currentRound.Four.Location = Location.No;
            }

            if(currentRound.Five.Text.ToUpper() == test[4])
            {
                currentRound.Five.Location = Location.Yes;
                currentRound.Score++;
            }
            else if(Word.Contains(currentRound.Five.Text))
                currentRound.Five.Location = Location.Contains;
            else
            {
                currentRound.Five.Location = Location.No;
            }

            int previous = (Turn - 1) >= 0 ? (Turn - 1) : 0;
            Finished = Turn >= Rounds.Count || Rounds[previous].Score == 5;
        }
    }

    private Wordle game = new Wordle();
    public string msg = "";

    protected override async Task OnInitializedAsync()
    {        
        await Setup();
    }

    public async Task Setup()
    {
        var text = await Http.GetStringAsync($"Wordles.txt");
        var words = text.Split(System.Environment.NewLine);
        msg = "";

        game = new Wordle(words);
    }  

    public void Guess()
    {
        msg = "";
        try
        {
            game.Guess();
        }
        catch(Exception ex)
        {
            msg = ex.Message;
        }
    }

    public string GetColor(Letter letter)
    {
        string retVal = "white";

        if(string.IsNullOrEmpty(letter.Text))
            return retVal;

        if(letter.Location == Location.Yes)
            retVal = "green";

        if(letter.Location == Location.No)
            retVal = "gray";

        if(letter.Location == Location.Contains)
            retVal = "orange";

        return retVal;
    }

    public string Finished()
    {
        return game.Finished ? game.Word : string.Empty;
    }
}

<div class="gameContainer">
    <h3>Word Guess</h3>

    <div class="container">
        <div class="row">
            <div class="col">
                <table>
                    <tr>
                        <td><input class="rounded" @bind="game.Rounds[0].One.Text" style="background-color: @GetColor(game.Rounds[0].One)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[0].Two.Text" style="background-color: @GetColor(game.Rounds[0].Two)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[0].Three.Text" style="background-color: @GetColor(game.Rounds[0].Three)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[0].Four.Text" style="background-color: @GetColor(game.Rounds[0].Four)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[0].Five.Text" style="background-color: @GetColor(game.Rounds[0].Five)" maxlength="1" disabled="true" /></td>
                    </tr>
                    <tr>
                        <td><input class="rounded" @bind="game.Rounds[1].One.Text" style="background-color: @GetColor(game.Rounds[1].One)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[1].Two.Text" style="background-color: @GetColor(game.Rounds[1].Two)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[1].Three.Text" style="background-color: @GetColor(game.Rounds[1].Three)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[1].Four.Text" style="background-color: @GetColor(game.Rounds[1].Four)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[1].Five.Text" style="background-color: @GetColor(game.Rounds[1].Five)" maxlength="1" disabled="true" /></td>
                    </tr>
                    <tr>
                        <td><input class="rounded" @bind="game.Rounds[2].One.Text" style="background-color: @GetColor(game.Rounds[2].One)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[2].Two.Text" style="background-color: @GetColor(game.Rounds[2].Two)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[2].Three.Text" style="background-color: @GetColor(game.Rounds[2].Three)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[2].Four.Text" style="background-color: @GetColor(game.Rounds[2].Four)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[2].Five.Text" style="background-color: @GetColor(game.Rounds[2].Five)" maxlength="1" disabled="true" /></td>
                    </tr>
                    <tr>
                        <td><input class="rounded" @bind="game.Rounds[3].One.Text" style="background-color: @GetColor(game.Rounds[3].One)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[3].Two.Text" style="background-color: @GetColor(game.Rounds[3].Two)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[3].Three.Text" style="background-color: @GetColor(game.Rounds[3].Three)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[3].Four.Text" style="background-color: @GetColor(game.Rounds[3].Four)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[3].Five.Text" style="background-color: @GetColor(game.Rounds[3].Five)" maxlength="1" disabled="true" /></td>
                    </tr>
                    <tr>
                        <td><input class="rounded" @bind="game.Rounds[4].One.Text" style="background-color: @GetColor(game.Rounds[4].One)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[4].Two.Text" style="background-color: @GetColor(game.Rounds[4].Two)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[4].Three.Text" style="background-color: @GetColor(game.Rounds[4].Three)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[4].Four.Text" style="background-color: @GetColor(game.Rounds[4].Four)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[4].Five.Text"  style="background-color: @GetColor(game.Rounds[4].Five)" maxlength="1" disabled="true" /></td>
                    </tr>
                    <tr>
                        <td><input class="rounded" @bind="game.Rounds[5].One.Text" style="background-color: @GetColor(game.Rounds[5].One)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[5].Two.Text" style="background-color: @GetColor(game.Rounds[5].Two)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[5].Three.Text" style="background-color: @GetColor(game.Rounds[5].Three)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[5].Four.Text" style="background-color: @GetColor(game.Rounds[5].Four)" maxlength="1" disabled="true" /></td>
                        <td><input class="rounded" @bind="game.Rounds[5].Five.Text"  style="background-color: @GetColor(game.Rounds[5].Five)" maxlength="1" disabled="true" /></td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="row">&nbsp;</div>
        <div class="row">
            <div class="col setup">
                <input class="rounded" type="text" @bind="game.GuessWord" maxlength="5" style="width: 210px;" autofocus="true" disabled="@game.Finished" />
            </div>
        </div>
        <div class="row">
            <div class="col setup">
                <button class="btn btn-outline-primary rounded" style="margin-top: 10px;" @onclick="@Guess" disabled="@game.Finished">Guess</button>
                <button class="btn btn-outline-secondary rounded" style="margin-top: 10px;" @onclick="@Setup">New</button>
            </div>
        </div>
        <div class="row">
            <div class="col setup">
                <label>@(Finished())</label>
                <label>@msg</label>
            </div>
        </div>
    </div>
</div>
<style>
    .gameContainer {
        padding: 15px;
        width: 300px;
        margin: auto;
    }
    input { width: 40px; }
    input:disabled { color: white; font-weight: bold; }
</style>