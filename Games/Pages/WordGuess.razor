@page "/wordguess"

@implements IAsyncDisposable;

@using System.Collections.Generic;
@using Games.WordGuess;
@using Games.Services;

@inject Blazored.LocalStorage.ILocalStorageService localStorage;

@code {
    [Inject]
    public IWordService WordService { get; set; } = null!;
    private Wordle game = new Wordle();
    private string[] words = new string[] { };
    private const string localStorageLabel = "wordGuess";

    protected override async Task OnInitializedAsync()
    {
        await Setup(false);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await localStorage.SetItemAsync("lastPage", "wordGuess");
    }

    public async Task Setup(bool newGame = false)
    {
        if (words == null || words.Length == 0)
        {
            words = await WordService.GetWords();
        }        

        var inLocalStorage = await localStorage.ContainKeyAsync(localStorageLabel);

        if (inLocalStorage && !newGame)
        {
            game = await localStorage.GetItemAsync<Wordle>(localStorageLabel);
        }
        else
        {
            game = new Wordle();

            game.Setup(words);

            await localStorage.SetItemAsync(localStorageLabel, game);
        }
    }

    public async Task Quit()
    {
        game.Msg = "";
        game.Finished = true;
        await localStorage.SetItemAsync(localStorageLabel, game);
    }

    public async Task Guess()
    {
        if (game.Clicks < 5) return;

        game.Msg = "";
        try
        {
            game.Guess();  
            game.Clicks = 0;
        }
        catch(Exception ex)
        {
            game.Msg = ex.Message;
        }
        
        game.Update = true;

        await localStorage.SetItemAsync(localStorageLabel, game);
    }

    public string GetColor(Letter letter)
    {
        string retVal = "white";

        if(string.IsNullOrEmpty(letter.Text))
            return retVal;

        if(letter.Location == Location.Yes)
            retVal = "green";

        if(letter.Location == Location.No)
            retVal = "gray";

        if(letter.Location == Location.Contains)
            retVal = "orange";

        return retVal;
    }

    public string GetForeColor(Letter letter)
    {
        string retVal = "black";

        if (GetColor(letter) != "white")
            retVal = "white";

        return retVal;
    }

    public string GetColor(int index, string letter, string color)
    {
        string retVal = color;

        var currentRound = game.Rounds[index];
        var test = currentRound.Letters.FirstOrDefault(o => o.Text == letter);
        if (test != null)
        {
            if (test.Location == Location.Yes)
                retVal = "green";
            if (test.Location == Location.Contains)
                retVal = "orange";
            if (test.Location == Location.No)
                retVal = "gray";
        }
        return retVal;
    }

    public string SetKeyColor(string letter)
    {
        string retVal = "white";

        if (game.Turn < 1)
        {
            return retVal;
        }

        for(int i = 0; i < game.Turn-1; i++)
        {
            retVal = GetColor(i, letter, retVal);
        }

        if (game.Update)
        {
            retVal = GetColor(game.Turn - 1, letter, retVal);            
        }

        return retVal;
    }

    public string SetForeColor(string letter)
    {
        string retVal = "black";

        if (SetKeyColor(letter) != "white")
            retVal = "white";

        return retVal;
    }

    public string Finished()
    {
        return game.Finished ? game.Word : string.Empty;
    }

    public async Task SetLetter(string letter)
    {
        game.Update = true;

        if (game.Clicks == 5) return;

        game.Guesses.Add(letter);
        game.SetLetter(game.Clicks, letter);

        if (game.Clicks < 5)
            game.Clicks++;

        await localStorage.SetItemAsync(localStorageLabel, game);
    }

    public async Task DeleteLetter()
    {
        if (game.Clicks == 0) return;

        game.DeleteLetter(game.Clicks-1);

        if(game.Guesses.Any())
            game.Guesses.RemoveAt(game.Clicks-1);

        game.Clicks--;

        game.Update = true;

        await localStorage.SetItemAsync(localStorageLabel, game);
    }

    public async ValueTask DisposeAsync()
    {
        await localStorage.SetItemAsync(localStorageLabel, game);
    }
}

<div class="gameContainer">

    <div id="stack">
            @for(int i = 0; i < game.Rounds.Count; i++)
            {
                @for(int j = 0; j < game.Rounds[i].Letters.Length; j++)
                {
                    <label class="form-control rounded" style="background-color: @GetColor(game.Rounds[i].Letters[j]); color: @GetForeColor(game.Rounds[i].Letters[j]);">@game.Rounds[i].Letters[j].Text</label>
                }
            }
    </div>
            
    <div class="keyboard keyboard1">                
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("Q"); color: @SetForeColor("Q")' @onclick='(async () => await SetLetter("Q"))' disabled="@game.Finished">Q</button>
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("W"); color: @SetForeColor("W")' @onclick='(async () => await SetLetter("W"))' disabled="@game.Finished">W</button>
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("E"); color: @SetForeColor("E")' @onclick='(async () => await SetLetter("E"))' disabled="@game.Finished">E</button>
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("R"); color: @SetForeColor("R")' @onclick='(async () => await SetLetter("R"))' disabled="@game.Finished">R</button>
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("T"); color: @SetForeColor("T")' @onclick='(async () => await SetLetter("T"))' disabled="@game.Finished">T</button>
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("Y"); color: @SetForeColor("Y")' @onclick='(async () => await SetLetter("Y"))' disabled="@game.Finished">Y</button>
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("U"); color: @SetForeColor("U")' @onclick='(async () => await SetLetter("U"))' disabled="@game.Finished">U</button>
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("I"); color: @SetForeColor("I")' @onclick='(async () => await SetLetter("I"))' disabled="@game.Finished">I</button>
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("O"); color: @SetForeColor("O")' @onclick='(async () => await SetLetter("O"))' disabled="@game.Finished">O</button>
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("P"); color: @SetForeColor("P")' @onclick='(async () => await SetLetter("P"))' disabled="@game.Finished">P</button>
    </div>

    <div class="keyboard keyboard2">
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("A"); color: @SetForeColor("A")' @onclick='(async () => await SetLetter("A"))' disabled="@game.Finished">A</button>
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("S"); color: @SetForeColor("S")' @onclick='(async () => await SetLetter("S"))' disabled="@game.Finished">S</button>
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("D"); color: @SetForeColor("D")' @onclick='(async () => await SetLetter("D"))' disabled="@game.Finished">D</button>
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("F"); color: @SetForeColor("F")' @onclick='(async () => await SetLetter("F"))' disabled="@game.Finished">F</button>
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("G"); color: @SetForeColor("G")' @onclick='(async () => await SetLetter("G"))' disabled="@game.Finished">G</button>
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("H"); color: @SetForeColor("H")' @onclick='(async () => await SetLetter("H"))' disabled="@game.Finished">H</button>
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("J"); color: @SetForeColor("J")' @onclick='(async () => await SetLetter("J"))' disabled="@game.Finished">J</button>
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("K"); color: @SetForeColor("K")' @onclick='(async () => await SetLetter("K"))' disabled="@game.Finished">K</button>
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("L"); color: @SetForeColor("L")' @onclick='(async () => await SetLetter("L"))' disabled="@game.Finished">L</button>
    </div>

    <div class="keyboard keyboard3">
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("Z"); color: @SetForeColor("Z")' @onclick='(async () => await SetLetter("Z"))' disabled="@game.Finished">Z</button>
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("X"); color: @SetForeColor("X")' @onclick='(async () => await SetLetter("X"))' disabled="@game.Finished">X</button>
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("C"); color: @SetForeColor("C")' @onclick='(async () => await SetLetter("C"))' disabled="@game.Finished">C</button>
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("V"); color: @SetForeColor("V")' @onclick='(async () => await SetLetter("V"))' disabled="@game.Finished">V</button>
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("B"); color: @SetForeColor("B")' @onclick='(async () => await SetLetter("B"))' disabled="@game.Finished">B</button>
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("N"); color: @SetForeColor("N")' @onclick='(async () => await SetLetter("N"))' disabled="@game.Finished">N</button>
        <button class="btn btn-outline-secondary rounded" style='background-color: @SetKeyColor("M"); color: @SetForeColor("M")' @onclick='(async () => await SetLetter("M"))' disabled="@game.Finished">M</button>
        <button class="btn btn-outline-secondary rounded" @onclick="async() => await DeleteLetter()" disabled="@game.Finished">&#9003;</button>
    </div>

    <div class="controls">
        <button class="btn btn-outline-primary rounded" @onclick="@(async () => await Guess())" disabled="@game.Finished">Guess</button>
        <button class="btn btn-outline-secondary rounded" @onclick="(async () => await Quit())" disabled="@game.Finished">Quit</button>
        <button class="btn btn-outline-secondary rounded" @onclick="(e => Setup(true))">New</button>
        <label>@(Finished())</label>
        <label><small class="text-danger">@game.Msg</small></label>
    </div>

</div>

<style>
    .gameContainer {
        display: grid;
        grid-template-columns: auto;
        justify-items: center;
        align-items: center;
    }
    #stack label { 
        width: 40px; 
        height: 40px;
        font-weight: bold; 
    }
    div.keyboard button { 
        font-weight: bold;
        font-size: small; 
        padding: 8px; 
        margin-top: 5px; 
        width: 30px;
    }

    #stack {
        display: grid;
        grid-template-columns: repeat(5, 40px);
        grid-gap: 2px;
        padding: 2px;
    }

    .keyboard1 {
        display: grid;
        grid-template-columns: repeat(10, 30px);
        grid-gap: 3px;
        padding: 3px;
    }

    .keyboard2 {
        display: grid;
        grid-template-columns: repeat(9, 30px);
        grid-gap: 3px;
        padding: 3px;
    }

    .keyboard3 {
        display: grid;
        grid-template-columns: repeat(8, 30px);
        grid-gap: 3px;
        padding: 3px;
    }

    .controls {
        display: grid;
        grid-template-columns: 50px 50px 50px auto auto;
        grid-gap: 5px;
        padding: 5px;
    }

    div.controls button {
        margin-top: 5px; 
        font-size: x-small;
    }

    div.controls label {
        margin-top: 5px; 
        font-weight: bold;
        vertical-align: bottom;
    }
</style>