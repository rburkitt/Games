@page "/concentration"

@implements IAsyncDisposable;

@using System.Collections.Generic
@using System.Linq
@using Games.Concentration

@inject Blazored.LocalStorage.ILocalStorageService localStorage

@code {
    Pexeso game = new Pexeso();

    private const string localStorageLabel = "concentration";

    protected override async Task OnInitializedAsync()
    {
        await DealCards(false);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await localStorage.SetItemAsync("lastPage", localStorageLabel);
    }

    public async ValueTask DisposeAsync()
    {
        await localStorage.SetItemAsync(localStorageLabel, game);
    }

    public async Task DealCards(bool newGame = false)
    {
        var inLocalStorage = await localStorage.ContainKeyAsync(localStorageLabel);

        if (inLocalStorage && !newGame)
        {
            game = await localStorage.GetItemAsync<Pexeso>(localStorageLabel);
            var tmpCard1 = game.Cards.FirstOrDefault(o => game.Card1 != null && o.IsEnabled == game.Card1.IsEnabled && o.Text == game.Card1.Text && o.Value == game.Card1.Value);
            var tmpCard2 = game.Cards.FirstOrDefault(o => game.Card2 != null && o.IsEnabled == game.Card2.IsEnabled && o.Text == game.Card2.Text && o.Value == game.Card2.Value);
            game.Card1 = tmpCard1;
            game.Card2 = tmpCard2;
        }
        else
        {
            game = new Pexeso();

            game.DealCards();

            await localStorage.SetItemAsync(localStorageLabel, game);
        }
    }

    public async Task flipCard(Card card)
    {
        game.FlipCard(card);

        await localStorage.SetItemAsync(localStorageLabel, game);
    }
}

    <div class="gameContainer">
        <div id="stack">
            @foreach (var card in game.Cards)
            {
            <button disabled="@(card.IsEnabled)" @onclick="(async e => await flipCard(card))">
                <div style="display: flex; align-items: center; justify-content: center;">@card.Text</div>
            </button>
}
        </div>

        <div class="bottom-bar">
            <div class="score">
                Flipped: @game.Flipped
            </div>
            <div class="deal">
                <button @onclick="@(async() => await DealCards(true))">New</button>
            </div>
        </div>
    </div>
    <style>

    .gameContainer h3 {
        text-align: center;
        vertical-align: middle;
        justify-content: center;
    }

    .gameContainer {
        padding: 15px;
        width: 300px;
        margin: auto;
    }

    .score {
        color: black;
        float: left;
    }

    .deal {
        color: black;
        float: right;
    }

    .deal button {
        background-color: transparent;
        text-align: center;
        vertical-align: middle;
        display: inline-flex;
        justify-content: center;
        border: 1px solid black;
        color: black;

        padding: .25rem .5rem;
        font-size: .875rem;
        line-height: 1.5;
        border-radius: .2rem;
    }

    #stack {
        align-content: center;
        width: 100%;
        margin: auto;
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        grid-gap: 5px;
        padding: 5px;
    }

    .bottom-bar {
        align-content: center;
        width: 100%;
        margin: auto;
        display: grid;
        grid-template-columns: 2fr 1fr;
        grid-gap: 20px;
        padding: 20px;
    }

    #stack button {
        background-color: transparent;
        width: 60px;
        height: 80px;
        font-size: 30px;
        border: 1px solid black;
        color: black;
        border-radius: .2rem;
    }

    @@media screen and (min-color-index:0) and(-webkit-min-device-pixel-ratio:0) {
        @@media {
            #stack button {
                text-align: center;
                vertical-align: middle;
                display: inline-flex;
                justify-content: center;
            }
        }
    }

    #stack button:disabled,
    #stack button[disabled] {
        border: 1px solid #999999;
        background-color: #cccccc;
        color: #666666;
    }

  </style>

