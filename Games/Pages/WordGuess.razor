@page "/wordguess"
@inject HttpClient Http

@using System.Collections.Generic;

@code {
    public enum Location
    {
        Yes = 0,
        No = 1,
        Contains = 2,
        Empty = 3
    }
    public class Letter
    {
        public string Text {get; set;} = "";
        public Location Location {get; set;} = Location.Empty;
    }
    public class Round
    {        
        public int Score {get; set;} = 0;
        public Letter[] Letters { get; } = new Letter[5]{new Letter(), new Letter(), new Letter(), new Letter(), new Letter()};
    }
    public class Wordle
    {
        public string Word {get; set;}= "";
        public int Turn {get; set;} = 0;
        public string GuessWord { get; set; } = "";
        public bool Finished { get; set; } = false;

        public List<Round> Rounds = new List<Round>(){new Round(), new Round(), new Round(), new Round(), new Round(), new Round()};

        public Wordle()
        {
            Turn = 0;
        }

        public Wordle(string[] words)
        {
            Random rnd = new Random();
            Word = words[rnd.Next(words.Length)].Trim().ToUpper();
            Turn = 0;
        }

        public void Guess()
        {
            if (string.IsNullOrEmpty(GuessWord)) return;
            if (GuessWord.Length != 5) throw new Exception("Your guess must be 5 letters.");
            if (Turn >= Rounds.Count) return;            

            // increase turn
            Turn++;

            var test = Word.ToCharArray().Select(c => c.ToString()).ToArray();

            var currentRound = Rounds.Skip(Turn - 1).First();

            currentRound.Letters[0] = new Letter { Text = GuessWord.Substring(0, 1).ToUpper() };
            currentRound.Letters[1] = new Letter { Text = GuessWord.Substring(1, 1).ToUpper() };
            currentRound.Letters[2] = new Letter { Text = GuessWord.Substring(2, 1).ToUpper() };
            currentRound.Letters[3] = new Letter { Text = GuessWord.Substring(3, 1).ToUpper() };
            currentRound.Letters[4] = new Letter { Text = GuessWord.Substring(4, 1).ToUpper() };

            var wordArray = Word.ToCharArray().Select(c => c.ToString()).ToArray();

            for(int i = 0; i < currentRound.Letters.Length; i++)
            {
                if(Word.Contains(currentRound.Letters[i].Text))
                {
                    if(currentRound.Letters[i].Text == wordArray[i])
                    {
                        currentRound.Letters[i].Location = Location.Yes;
                        currentRound.Score++;
                    }
                    else
                    {
                        currentRound.Letters[i].Location = Location.Contains;
                    }
                }
                else
                {
                    currentRound.Letters[i].Location = Location.No;
                }
            }

            for(int i = 0; i < currentRound.Letters.Length; i++)
            {
                var wordCount = wordArray.Count(o => o == currentRound.Letters[i].Text);
                var guessCount = currentRound.Letters.Count(o => o.Text == currentRound.Letters[i].Text);
                var foundCount = currentRound.Letters.Count(t => t.Text == currentRound.Letters[i].Text && t.Location == Location.Yes);

                if(guessCount > 1)
                { 
                    if(Word.Contains(currentRound.Letters[i].Text))
                    {
                        if(currentRound.Letters[i].Text == wordArray[i])
                        {
                            currentRound.Letters[i].Location = Location.Yes;
                        }
                        else
                        {
                            if(wordCount == foundCount)
                            {
                                currentRound.Letters[i].Location = Location.No;
                            }
                            else
                            {
                                currentRound.Letters[i].Location = Location.Contains;
                            }
                        }
                    }
                    else
                    {
                        currentRound.Letters[i].Location = Location.No;
                    }
                }
            }

            GuessWord = "";

            int previous = (Turn - 1) >= 0 ? (Turn - 1) : 0;
            Finished = Turn >= Rounds.Count || Rounds[previous].Score == 5;
        }
    }

    private Wordle game = new Wordle();
    public string msg = "";
    private ElementReference myGuess;

    protected override async Task OnInitializedAsync()
    {        
        await Setup();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await myGuess.FocusAsync();
    }

    public async Task Setup()
    {
        var text = await Http.GetStringAsync($"Wordles.txt");
        var words = text.Split(System.Environment.NewLine);
        msg = "";

        game = new Wordle(words);
    }  

    public void Guess()
    {
        msg = "";
        try
        {
            game.Guess();            
        }
        catch(Exception ex)
        {
            msg = ex.Message;
        }
    }

    public string GetColor(Letter letter)
    {
        string retVal = "white";

        if(string.IsNullOrEmpty(letter.Text))
            return retVal;

        if(letter.Location == Location.Yes)
            retVal = "green";

        if(letter.Location == Location.No)
            retVal = "gray";

        if(letter.Location == Location.Contains)
            retVal = "orange";

        return retVal;
    }

    public string Finished()
    {
        return game.Finished ? game.Word : string.Empty;
    }
}

<div class="gameContainer">
    <h3>Word Guess</h3>

    <div class="container">
        <div class="row">
            <div class="col">
                <table>
                    @for(int i = 0; i < game.Rounds.Count; i++)
                    {
                        <tr>
                        @for(int j = 0; j < game.Rounds[i].Letters.Length; j++)
                        {
                            <td><input class="rounded" @bind="game.Rounds[i].Letters[j].Text" style="background-color: @GetColor(game.Rounds[i].Letters[j])" maxlength="1" disabled="true" /></td>
                        }
                        </tr>
                    }
                </table>
            </div>
        </div>
        <div class="row">&nbsp;</div>
        <div class="row">
            <div class="col setup">
                <input @ref="myGuess" class="rounded" type="text" @bind="game.GuessWord" maxlength="5" style="width: 210px;" autofocus="true" disabled="@game.Finished" />
            </div>
        </div>
        <div class="row">
            <div class="col setup">
                <button class="btn btn-outline-primary rounded" style="margin-top: 10px;" @onclick="@Guess" disabled="@game.Finished">Guess</button>
                <button class="btn btn-outline-secondary rounded" style="margin-top: 10px;" @onclick="@Setup">New</button>
            </div>
        </div>
        <div class="row">
            <div class="col setup">
                <label>@(Finished())</label>
                <label>@msg</label>
            </div>
        </div>
    </div>
</div>
<style>
    .gameContainer {
        padding: 15px;
        width: 300px;
        margin: auto;
    }
    input { width: 40px; }
    input:disabled { color: white; font-weight: bold; }
</style>